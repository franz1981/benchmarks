<!-- RadarGun 3.0 benchmark -->
<benchmark xmlns="urn:radargun:benchmark:3.0">

    <!-- Specifies where should the master open socket  -->
    <master bindAddress="${master.address:127.0.0.1}" port="${master.port:2103}"/>

    <clusters>
        <!--<cluster size="4"/>-->
        <cluster size="8"/>
    </clusters>

    <!-- List of configurations of the services -->
    <configurations>
        <!--<config name="7.2">-->
            <!--<setup plugin="infinispan72">-->
                <!--<vm-args>-->
                    <!--<properties>-->
                        <!--<property name="jgroups.tcp.address" value="e${env.HOSTNAME}"/>-->
                    <!--</properties>-->
                <!--</vm-args>-->
                <!--<embedded xmlns="urn:radargun:plugins:infinispan72:3.0" file="dist-sync.xml"/>-->
            <!--</setup>-->
        <!--</config>-->
        <!--<config name="9.0-BASE">-->
            <!--<setup plugin="infinispan90">-->
                <!--<vm-args>-->
                    <!--<properties>-->
                        <!--<property name="jgroups.config" value="jgroups-tcp.xml" />-->
                        <!--<property name="jgroups.bundler" value="transfer-queue" />-->
                        <!--<property name="jgroups.tcp.address" value="e${env.HOSTNAME}"/>-->
                        <!--<property name="jgroups.oob_thread_pool.min_threads" value="1"/>-->
                    <!--</properties>-->
                <!--</vm-args>-->
                <!--<embedded xmlns="urn:radargun:plugins:infinispan82:3.0" file="dist-sync.xml"/>-->
            <!--</setup>-->
        <!--</config>-->
        <!--<config name="9.0-RVANSA1">-->
            <!--<setup plugin="infinispan90-rvansa1">-->
                <!--<vm-args>-->
                    <!--<properties>-->
                        <!--<property name="jgroups.config" value="jgroups-tcp.xml" />-->
                        <!--<property name="jgroups.bundler" value="transfer-queue" />-->
                        <!--<property name="jgroups.tcp.address" value="e${env.HOSTNAME}"/>-->
                        <!--<property name="jgroups.oob_thread_pool.min_threads" value="1"/>-->
                    <!--</properties>-->
                <!--</vm-args>-->
                <!--<embedded xmlns="urn:radargun:plugins:infinispan82:3.0" file="dist-sync.xml"/>-->
            <!--</setup>-->
        <!--</config>-->
        <!--<config name="TcpTransport+FastResponse">-->
            <!--<setup plugin="infinispan90-rvansa2">-->
                <!--<vm-args>-->
                    <!--<flight-recorder enabled="true" filename="/p/lscratchg/vansa1/fr-${env.HOSTNAME}.jfr" settings="profile"/>-->
                    <!--<properties>-->
                        <!--<property name="jgroups.config" value="jgroups-tcp.xml" />-->
                        <!--<property name="jgroups.bundler" value="transfer-queue" />-->
                        <!--<property name="jgroups.tcp.address" value="e${env.HOSTNAME}"/>-->
                        <!--<property name="jgroups.oob_thread_pool.min_threads" value="1"/>-->
                        <!--<property name="infinispan.transport" value="org.infinispan.remoting.transport.tcp.TcpTransport"/>-->
                        <!--<property name="infinispan.tcptransport.fastresponse" value="true"/>-->
                        <!--<property name="org.mft.nodeId" value="${slave.index}"/>-->
                        <!--<property name="org.mft.output" value="/p/lscratchg/vansa1/${env.HOSTNAME}.bin"/>-->
                    <!--</properties>-->
                <!--</vm-args>-->
                <!--<embedded xmlns="urn:radargun:plugins:infinispan82:3.0" file="dist-sync.xml"/>-->
            <!--</setup>-->
        <!--</config>-->
        <config name="TcpTransport">
            <setup plugin="infinispan90">
                <vm-args>
                    <flight-recorder enabled="true" filename="/p/lscratchg/vansa1/tt-${env.HOSTNAME}.jfr" settings="profile"/>
                    <properties>
                        <property name="jgroups.config" value="jgroups-tcp.xml" />
                        <property name="jgroups.bundler" value="transfer-queue" />
                        <!--<property name="jgroups.tcp.address" value="${env.HOSTNAME}"/>-->
                        <property name="infinispan.transport" value="org.infinispan.remoting.transport.tcp.TcpTransport"/>
                        <!--<property name="org.mft.nodeId" value="${slave.index}"/>-->
                        <!--<property name="org.mft.output" value="/p/lscratchg/vansa1/${env.HOSTNAME}.bin"/>-->
                    </properties>
                </vm-args>
                <embedded xmlns="urn:radargun:plugins:infinispan82:3.0" file="dist-sync.xml"/>
            </setup>
        </config>
        <config name="JGroupsTransport">
            <setup plugin="infinispan90">
                <vm-args>
                    <!--<flight-recorder enabled="true" filename="/p/lscratchg/vansa1/${env.HOSTNAME}.jfr" settings="profile"/>-->
                    <properties>
                        <property name="jgroups.config" value="jgroups-tcp.xml" />
                        <property name="jgroups.bundler" value="transfer-queue" />
                        <!--<property name="jgroups.tcp.address" value="${env.HOSTNAME}"/>-->
                        <!--<property name="org.mft.nodeId" value="${slave.index}"/>-->
                        <!--<property name="org.mft.output" value="/p/lscratchg/vansa1/${env.HOSTNAME}.bin"/>-->
                    </properties>
                </vm-args>
                <embedded xmlns="urn:radargun:plugins:infinispan82:3.0" file="dist-sync.xml"/>
            </setup>
        </config>
        <!--<config name="Hazelcast 3.6.2">-->
            <!--<setup plugin="hazelcast3">-->
                <!--<vm-args>-->
                    <!--<flight-recorder enabled="true" filename="/p/lscratchg/vansa1/${env.HOSTNAME}.jfr" settings="profile"/>-->
                    <!--<properties>-->
                        <!--<property name="org.mft.nodeId" value="${slave.index}"/>-->
                        <!--<property name="org.mft.output" value="/p/lscratchg/vansa1/${env.HOSTNAME}.bin"/>-->
                    <!--</properties>-->
                <!--</vm-args>-->
                <!--<hazelcast xmlns="urn:radargun:plugins:hazelcast3:3.0" file="dist-sync.xml"/>-->
            <!--</setup>-->
        <!--</config>-->
        <!--<config name="Hazelcast 3.6.2 no MFT">-->
            <!--<setup plugin="hazelcast3">-->
                <!--<vm-args>-->
                    <!--<flight-recorder enabled="true" filename="/p/lscratchg/vansa1/tt-${env.HOSTNAME}.jfr" settings="profile"/>-->
                <!--</vm-args>-->
                <!--<hazelcast xmlns="urn:radargun:plugins:hazelcast3:3.0" file="dist-sync.xml"/>-->
            <!--</setup>-->
        <!--</config>-->
    </configurations>

    <!-- Sequence of stages executed on the cluster -->
    <rg:scenario xmlns:rg="urn:radargun:benchmark:3.0"
                 xmlns:cache="urn:radargun:stages:cache:3.0"
                 xmlns:l="urn:radargun:stages:legacy:3.0"
                 xmlns="urn:radargun:stages:core:3.0">
        <!-- Start services on all nodes -->
        <service-start />
        <!-- Begin monitoring of CPU, memory usage and GC -->
        <jvm-monitor-start />

        <!-- Preload the cache with data -->
        <cache:load num-entries="${entry.count:10000}"/>

        <l:basic-operations-test test-name="warmup" duration="1m" put-ratio="1" get-ratio="4" num-threads-per-node="10">
            <statistics>
                <common/>
            </statistics>
            <l:key-selector>
                <l:colliding-keys num-entries="${entry.count:10000}"/>
            </l:key-selector>
        </l:basic-operations-test>

        <!--<l:basic-operations-test test-name="get-and-puts-only" duration="2m"-->
                                 <!--get-and-put-ratio="1" put-ratio="0" get-ratio="0"-->
                                 <!--num-threads-per-node="50">-->
            <!--<l:key-selector>-->
                <!--<l:colliding-keys num-entries="${entry.count:10000}"/>-->
            <!--</l:key-selector>-->
            <!--<statistics>-->
                <!--<common/>-->
            <!--</statistics>-->
        <!--</l:basic-operations-test>-->

        <rg:repeat from="10" to="50" inc="10">
            <!--<l:basic-operations-test test-name="puts-only" amend-test="true" duration="1m"-->
                                     <!--put-ratio="1" get-ratio="0"-->
                                     <!--num-threads-per-node="${repeat.counter:10}">-->
                <!--<l:key-selector>-->
                    <!--<l:concurrent-keys total-entries="${entry.count:10000}"/>-->
                <!--</l:key-selector>-->
                <!--<statistics>-->
                    <!--<common/>-->
                <!--</statistics>-->
            <!--</l:basic-operations-test>-->

            <l:basic-operations-test test-name="combined" amend-test="true" duration="1m"
                                     put-ratio="1" get-ratio="4"
                                     num-threads-per-node="${repeat.counter:1}">
                <statistics>
                    <common/>
                </statistics>
                <l:key-selector>
                    <l:colliding-keys num-entries="${entry.count:10000}"/>
                </l:key-selector>
            </l:basic-operations-test>

            <!--<l:basic-operations-test test-name="get-only" amend-test="true" duration="1m"-->
                                     <!--put-ratio="0" get-ratio="1"-->
                                     <!--num-threads-per-node="${repeat.counter:10}">-->
                <!--<l:key-selector>-->
                    <!--<l:colliding-keys num-entries="${entry.count:10000}"/>-->
                <!--</l:key-selector>-->
                <!--<statistics>-->
                    <!--<common/>-->
                <!--</statistics>-->
            <!--</l:basic-operations-test>-->
        </rg:repeat>

        <!--<l:basic-operations-test test-name="combined-get-and-put" duration="2m"-->
                                 <!--get-and-put-ratio="1" put-ratio="0" get-ratio="4"-->
                                 <!--num-threads-per-node="50">-->
            <!--<l:key-selector>-->
                <!--<l:colliding-keys num-entries="${entry.count:10000}"/>-->
            <!--</l:key-selector>-->
            <!--<statistics>-->
                <!--<common/>-->
            <!--</statistics>-->
        <!--</l:basic-operations-test>-->

        <!-- Stop JVM monitoring -->
        <jvm-monitor-stop />
        <service-stop/>
    </rg:scenario>
    <cleanup check-threads="false" />

    <reports>
        <!--<reporter type="csv" />-->
        <reporter type="html">
            <html xmlns="urn:radargun:reporters:reporter-default:3.0">
                <target-dir>${env.PWD}/results/html</target-dir>
                <test-report>
                    <separate-cluster-charts>true</separate-cluster-charts>
                </test-report>
            </html>
        </reporter>

        <!--<reporter type="serialized">-->
            <!--<serialized xmlns="urn:radargun:reporters:reporter-default:3.0">-->
                <!--<target-dir>${env.PWD}/results/serialized</target-dir>-->
            <!--</serialized>-->
        <!--</reporter>-->
    </reports>

</benchmark>